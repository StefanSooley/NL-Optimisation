====== ====== Overview ====== ======

Number of iterations: 4
Solution: [1.         5.00000005 3.00000003]
Time taken: 2.489 ms

======= ====== Steps ====== =======

To calculate each successive x vector iteratively, the formula: x_new = x + alpha * d is used.
This will continue until the norm of d is less than a tolerance.
Each d is calculated using: d_new = beta * d - g,
where beta is calculated using the Polak-Ribiere formula.
Alpha is approximated using a line search algorithm to minimise the function f(x + alpha*d). 


1)
In the first step, the seed vector x0 was [0.5 0.5 0.5], and d was simply the negative of the gradient
resulting in d = [1. 9. 5.]. The new x vector is given by the equation x = x + alpha * d, 

The resulting x vector is [0.5700945  5.13085046 2.85047248].


2)
The calculated beta value is: 0.008387087537987108,
making d [ 0.8681981  -0.18621714  0.34099048].
The alpha value found using line search minimisation is: 0.570094495815053

Using these values, the resulting x vector is [1.00058276 5.03851636 3.01954956]

Since the calculated norm of d is higher than the tolerance, another iteration is required.

3)
The calculated beta value is: -5.411005431580929e-07,
making d [-0.00116598 -0.07703262 -0.0390993 ].
The alpha value found using line search minimisation is: 0.4958410562021183

Using these values, the resulting x vector is [0.99999977 5.0000001  2.99999994]

Since the calculated norm of d is higher than the tolerance, another iteration is required.

4)
The calculated beta value is: -1.4071664234605724e-06,
making d [ 4.69782459e-07 -1.00762347e-07  1.84510057e-07].
The alpha value found using line search minimisation is: 0.5000007035841987

Using these values, the resulting x vector is [1.         5.00000005 3.00000003]

Since the calculated norm of d is now below the tolerance, this x is the solution to the desired accuracy.
